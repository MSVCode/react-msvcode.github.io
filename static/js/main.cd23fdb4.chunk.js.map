{"version":3,"sources":["asset/img/vincent.png","Homepage/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Homepage","className","Jumbotron","Row","Col","alt","src","VincentImg","xs","size","offset","Card","CardBody","href","target","rel","Button","color","CardFooter","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,qC,mOC0G5BC,EA7FE,WACf,OACE,yBAAKC,UAAU,wBACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yCAGJ,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKH,UAAU,yBACb,yBAAKI,IAAI,QAAQC,IAAKC,IAAYN,UAAU,mBAIlD,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,qFAEE,6BAFF,6EAQJ,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,QAGJ,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKI,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACT,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,wBAAIH,UAAU,YAAd,WAEP,yBAAKA,UAAU,cACf,kBAACE,EAAA,EAAD,CAAKF,UAAU,SACb,kBAACG,EAAA,EAAD,KACE,uBACES,KAAK,8BACLC,OAAO,SACPC,IAAI,uBAEJ,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAd,YAGJ,kBAACb,EAAA,EAAD,KACE,uBACES,KAAK,uDACLC,OAAO,SACPC,IAAI,uBAEJ,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAd,eAIN,kBAACd,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,wBAAIH,UAAU,YAAd,oBAEP,yBAAKA,UAAU,cACf,kBAACE,EAAA,EAAD,CAAKF,UAAU,SACb,kBAACG,EAAA,EAAD,KACE,uBACES,KAAK,yEACLC,OAAO,SACPC,IAAI,uBAEJ,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAd,iCAGJ,kBAACb,EAAA,EAAD,KACE,uBACES,KAAK,mFACLC,OAAO,SACPC,IAAI,uBAEJ,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAd,6CAKR,kBAACC,EAAA,EAAD,KACE,2BAAOjB,UAAU,cAAjB,oC,QC5ECkB,EAZH,WACV,OACE,yBAAKlB,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,KAAK,IAAIC,UAAWrB,QCFfsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cd23fdb4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vincent.48e73fd8.png\";","import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  Jumbotron,\r\n  Col,\r\n  Row,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nimport VincentImg from \"../asset/img/vincent.png\";\r\n\r\nconst Homepage = () => {\r\n  return (\r\n    <div className=\"homepage text-center\">\r\n      <Jumbotron>\r\n        <Row>\r\n          <Col>\r\n            <h1>MSVCode</h1>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <div className=\"jumbo-photo-container\">\r\n              <img alt=\"jumbo\" src={VincentImg} className=\"jumbo-photo\" />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <p>\r\n              Vincent is an avid Full-Stack developer from Indonesia.\r\n              <br />\r\n              He primarily focuses on NodeJS, React, Laravel, and Flutter\r\n              frameworks.\r\n            </p>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col></Col>\r\n        </Row>\r\n      </Jumbotron>\r\n      <Row>\r\n        <Col xs={{ size: 8, offset: 2 }}>\r\n          <Card>\r\n            <CardBody>\r\n              <Row>\r\n                <Col><h5 className=\"subtitle\">Links</h5></Col>\r\n              </Row>\r\n              <div className=\"separator\" />\r\n              <Row className=\"links\">\r\n                <Col>\r\n                  <a\r\n                    href=\"https://github.com/MSVCode/\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    <Button color=\"link\">GitHub</Button>\r\n                  </a>\r\n                </Col>\r\n                <Col>\r\n                  <a\r\n                    href=\"https://www.linkedin.com/in/vincent-utomo-3491b5100/\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    <Button color=\"link\">LinkedIn</Button>\r\n                  </a>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col><h5 className=\"subtitle\">Personal Works</h5></Col>\r\n              </Row>\r\n              <div className=\"separator\" />\r\n              <Row className=\"links\">\r\n                <Col>\r\n                  <a\r\n                    href=\"https://play.google.com/store/apps/details?id=com.msvcode.qr_companion\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    <Button color=\"link\">QR Companion on Google Play</Button>\r\n                  </a>\r\n                </Col>\r\n                <Col>\r\n                  <a\r\n                    href=\"https://play.google.com/store/apps/details?id=com.msvcode.my_personal_aggregator\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    <Button color=\"link\">My Personal Aggregator on Google Play</Button>\r\n                  </a>\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n            <CardFooter>\r\n              <small className=\"text-muted\">Contact: msvcode@gmail.com</small>\r\n            </CardFooter>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './asset/index.css';\n\nimport Homepage from \"./Homepage\";\nimport { BrowserRouter } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={Homepage}/>\n      </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}